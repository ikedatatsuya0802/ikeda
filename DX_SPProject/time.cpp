//=============================================================================
//
//	タイトル	経過時間
//	ファイル名	time.cpp
//	作成者		AT13A284_07 池田達哉
//	作成日		2017/01/21
//
//=============================================================================
//=============================================================================
//	インクルード
//=============================================================================
#include "time.h"

//=============================================================================
//	静的メンバ変数
//=============================================================================
//LPDIRECT3DTEXTURE9	CTime::m_pTexture;

//=============================================================================
//	関数名	:CTime()
//	引数	:無し
//	戻り値	:無し
//	説明	:コンストラクタ。
//=============================================================================
CTime::CTime(int value) : CScene2DDX(true)
{
	m_fLength	= 0.0f;
	m_fAngle	= 0.0f;
}

//=============================================================================
//	関数名	:~CTime()
//	引数	:無し
//	戻り値	:無し
//	説明	:デストラクタ。
//=============================================================================
CTime::~CTime()
{

}

//=============================================================================
//	関数名	:Init
//	引数	:D3DXVECTOR3 pos(初期位置)
//	戻り値	:無し
//	説明	:初期化処理を行うと共に、初期位置を設定する。
//=============================================================================
void CTime::Init(int value, D3DXVECTOR3 pos, D3DXVECTOR2 size)
{
	m_ifCountStart	= false;
	m_StartTime		= 0;
	m_Time.SetTime(0, 0, 0);

}

//=============================================================================
//	関数名	:Uninit
//	引数	:無し
//	戻り値	:無し
//	説明	:終了処理を行う。
//=============================================================================
void CTime::Uninit(void)
{

}

//=============================================================================
//	関数名	:Update
//	引数	:無し
//	戻り値	:無し
//	説明	:更新処理を行う。
//=============================================================================
void CTime::Update(void)
{
	DWORD time = 0;

	// カウント中の場合
	if(m_ifCountStart)
	{
		// 現在時間取得
		time = timeGetTime() - m_StartTime;

		// 時間変換
		m_Time.minute		= time / 1000 / 60;
		m_Time.second		= time / 1000;
		m_Time.millisec		= time % 1000;
	}
}

//=============================================================================
//	関数名	:Draw
//	引数	:無し
//	戻り値	:無し
//	説明	:描画処理を行う。
//=============================================================================
void CTime::Draw(void)
{

}

//=============================================================================
//	関数名	:Create
//	引数	:D3DXVECTOR3 pos(初期位置)
//	戻り値	:無し
//	説明	:インスタンス生成を行うと共に、初期位置を設定する。
//=============================================================================
CTime *CTime::Create(int value, D3DXVECTOR3 pos, D3DXVECTOR2 size)
{
	CTime *instance;	// インスタンス
	
	// インスタンス生成
	instance = new CTime();
	
	// 初期化処理
	instance->Init(value, pos, size);
	
	// インスタンスをリターン
	return instance;
}

//=============================================================================
//	関数名	:SaveTime
//	引数	:無し
//	戻り値	:無し
//	説明	:ランキングに引き渡す時間を保存。
//=============================================================================
void CTime::SaveTime(void)
{
	FILE* fp;

	fopen_s(&fp, TIME_FILENAME, "w");



	fclose(fp);
}